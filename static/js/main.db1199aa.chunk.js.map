{"version":3,"sources":["serviceWorker.js","components/Home.js","components/Products.js","components/Fortune.js","selectors/answer.js","components/Answer.js","App.js","initialState.js","redux/reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","connect","state","products","withRouter","history","callToActions","Object","keys","map","item","index","CSSTransition","in","timeout","classNames","key","onClick","push","type","className","description","src","alt","TransitionGroup","appear","productsGroupName","params","productName","productsList","name","image","height","onSubmit","e","preventDefault","htmlFor","rows","id","required","value","answer","reduce","acc","concat","a","sort","Math","random","b","slice","shift","App","store","basename","process","path","component","Products","Fortune","Answer","Home","initialState","floorCare","freshYourHouse","killInsects","reducer","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db1199aa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport { connect } from 'react-redux'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport { withRouter } from \"react-router-dom\"\n\nfunction Home({products, history}) {\n    const callToActions = Object.keys(products).map((item, index) => (\n        <CSSTransition in={true} timeout={1000} classNames=\"animated-node\" key={'item-list' + index}>\n        <button onClick={() => history.push(\"/products/\" + item)} type=\"button\" className=\"btn btn-primary ml-2 mb-2\" key={'item-list-button' + index}>\n            {products[item].description}\n        </button>\n        </CSSTransition>\n    ));\n    return (\n        <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n            <header>\n                <img src=\"./images/toilet-duck.png\" alt=\"Duck\"/>\n                <p className=\"lead\">\n                    I am the toiled duck and I can offer you\n                    many great things. Would you like to:\n                </p>\n                <TransitionGroup appear={true}>\n                {callToActions}\n                    <CSSTransition in={true} timeout={1000} classNames=\"animated-node\" key=\"item-list-fortune\">\n                    <button onClick={() => history.push(\"/fortune/\")} type=\"button\" className=\"btn btn-primary ml-2\" key=\"item-list-button-fortune\">\n                        I can offer you fortune telling also\n                    </button>\n                    </CSSTransition>\n                </TransitionGroup>\n            </header>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        products: state.products\n    }\n}\n\nexport default connect(mapStateToProps)(withRouter(Home))\n","import React from \"react\";\nimport {connect} from 'react-redux'\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\n\nfunction Products({products, match}) {\n    const {params: {productName: productsGroupName}} = match\n    const productsList = products[productsGroupName] ? products[productsGroupName].products.map((item, index) => {\n        return (\n            <CSSTransition in={true} timeout={1000} classNames=\"animated-node\" key={'product-list' + index}>\n                <div key={\"products-list\" + index} className=\"card mb-4 box-shadow\">\n                    <div className=\"card-header\">\n                        <h4 className=\"my-0 font-weight-normal\">{item.name}</h4>\n                    </div>\n                    <div className=\"card-body\">\n                        <ul className=\"list-unstyled mt-3 mb-4\">\n                            <li>{item.description}</li>\n                            <li><img src={\".\" + item.image} height=\"88px\" alt=\"\"/></li>\n                        </ul>\n                    </div>\n                </div>\n            </CSSTransition>)\n    }) : [];\n\n    return (\n        <>\n            <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center clearfix\">\n                <header>\n                    <img src=\"./images/toilet-duck.png\" alt=\"Duck\"/>\n                    <p className=\"lead\">\n                        Great choice.\n                        I can offer you these perfect products:\n                    </p>\n                </header>\n            </div>\n            <div className=\"container\">\n                <div className=\"row align-items-center justify-content-center\">\n                    <div className=\"card-deck mb-3 text-center\">\n                        <TransitionGroup appear={true}>\n                            {productsList}\n                        </TransitionGroup>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        products: state.products\n    }\n}\n\nexport default connect(mapStateToProps)(Products)\n","import React from \"react\";\nimport {connect} from 'react-redux'\nimport {withRouter} from \"react-router-dom\"\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\n\nfunction Fortune({products, history}) {\n    return (\n        <>\n            <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n                <header>\n                    <img src=\"./images/toilet-duck.png\" alt=\"Duck\"/>\n                    <p className=\"lead\">\n                        Yay! I can predict your future also.\n                        Just type your question here.\n                        Don't worry. It remains secret.\n                    </p>\n                </header>\n            </div>\n            <div className=\"container\">\n                <form onSubmit={(e) => {\n                    e.preventDefault()\n                    history.push('/answer/')\n                }}>\n                    <div className=\"form-row align-items-center justify-content-center\">\n                        <div className=\"col-10 col-sm-8\">\n                            <div className='form-group mx-auto text-center'>\n                                <label htmlFor=\"question\">\n                                    Please type your question\n                                </label>\n                                <textarea rows=\"4\" id=\"question\" required className='form-control noresize'></textarea>\n                            </div>\n                        </div>\n                    </div>\n                    <TransitionGroup appear={true} className=\"form-row align-items-center justify-content-center\">\n                        <CSSTransition in={true} timeout={1000} classNames=\"animated-node\">\n                            <input className=\"btn btn-primary\" type=\"submit\" value=\"Give me an answer\"\n                                   key=\"request-answer-button\"></input>\n                        </CSSTransition>\n                    </TransitionGroup>\n                </form>\n            </div>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        products: state.products\n    }\n}\n\nexport default connect(mapStateToProps)(withRouter(Fortune))\n","const answer = (state) => {\r\n    const products = Object.keys(state.products).reduce((acc, item) => {\r\n        acc = acc.concat(state.products[item].products)\r\n        return acc\r\n    }, [])\r\n    return products\r\n        .map((a) => ({sort: Math.random(), value: a}))\r\n        .sort((a, b) => a.sort - b.sort)\r\n        .map((a) => a.value).slice(0, 1).shift()\r\n}\r\n\r\nexport default answer","import React from \"react\";\nimport {connect} from 'react-redux'\nimport answer from \"../selectors/answer\"\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\n\nfunction Answer({answer}) {\n    return (\n        <>\n            <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center clearfix\">\n                <header>\n                    <img src=\"./images/toilet-duck.png\" alt=\"Duck\"/>\n                    <p className=\"lead\">\n                        Great!\n                        You are lucky.\n                        This is your answer:\n                    </p>\n                </header>\n            </div>\n            <div className=\"container\">\n                <div className=\"row align-items-center justify-content-center\">\n                    <div className=\"card-deck mb-3 text-center\">\n                        <TransitionGroup appear={true}>\n                            <CSSTransition in={true} timeout={1000} classNames=\"animated-node\" key='answer-holder-item'>\n                                <div key=\"products-list-answer\" className=\"card mb-4 box-shadow\">\n                                    <div className=\"card-header\">\n                                        <h4 className=\"my-0 font-weight-normal\">{answer.name}</h4>\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <ul className=\"list-unstyled mt-3 mb-4\">\n                                            <li>{answer.answer}</li>\n                                            <li><img src={\".\" + answer.image} height=\"88px\" alt=\"\"/></li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </CSSTransition>\n                        </TransitionGroup>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        answer: answer(state)\n    }\n}\n\nexport default connect(mapStateToProps)(Answer)\n","import React from 'react';\nimport {Provider} from 'react-redux'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport Home from \"./components/Home\";\nimport Products from \"./components/Products\";\nimport Fortune from \"./components/Fortune\";\nimport Answer from \"./components/Answer\";\n\nconst App = ({store}) => (\n    <Provider store={store}>\n        <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route path=\"/products/:productName([a-zA-Z]+)\" component={Products}/>\n                <Route path=\"/fortune/\" component={Fortune}/>\n                <Route path=\"/answer/\" component={Answer}/>\n                <Route path=\"/\" component={Home}/>\n            </Switch>\n        </Router>\n    </Provider>\n)\n\nexport default App;\n\n\n","const initialState = {\n    products: {\n        floorCare: {\n            description: \"Cleaning your floor\",\n            products: [\n                {\n                    name: \"Mr Muscle\",\n                    image: \"/images/Mr_Muscle_Man.jpg\",\n                    description: \"Hard-surface cleaner\",\n                    answer: \"You will have power to fix everything. Be brave\"\n                }\n            ]\n        },\n        freshYourHouse: {\n            description: \"Made your house to smell well\",\n            products: [\n                {\n                    name: \"Glade\",\n                    image: \"/images/glade-fresh.jpg\",\n                    description: \"Air fresheners\",\n                    answer: \"With Glade you will be irresistible for everyone\"\n                }\n            ]\n        },\n        killInsects: {\n            description: \"Kill insects\",\n            products: [\n                {\n                    name: \"Raid\",\n                    image: \"/images/Raid_Logo.png\",\n                    description: \"Insecticides\",\n                    answer: \"With Raid you will prevail all your enemies\"\n                }\n            ]\n        }\n    }\n}\n\nexport default initialState","import initialState from '../initialState'\r\n\r\nconst reducer = (state= initialState,\r\n                 action) => {\r\n    return state\r\n}\r\n\r\nexport default reducer","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport reducer from './redux/reducer';\nimport { createStore } from \"redux\";\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport initialState from \"./initialState\";\n\nconst store = createStore(\n    reducer,\n    initialState,\n    devToolsEnhancer({})\n)\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}